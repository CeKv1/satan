<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % commondata SYSTEM "../../entities/common.ent" > %commondata;
]>
<sect1 id="netkit">
	<title>Emulation d'architecture réseau avec Netkit</title>
	<para>
	 La virtualisation de serveurs et de postes de travail est aujourd'hui une pratique extrêmement répandue. Elle est devenue indispensable à tous les administrateurs système pour effectuer des tests de pré-production ou optimiser les ressources matérielles des data-centers. Nous exposons dans cette documentation ce que les mécanismes  de virtualisation peuvent apport aux administrateurs et architectes réseau dans une optique de prototypage. ces outils servent également dans le cadre d'enseignements ou comme outil d'étude pour le pen-tester souhaitant répliquer l'architecture d'une partie du réseau audité pour effectuer des tests avant de lancer l'attaque en réel.
	</para>
	<para>La reproduction en laboratoire de réseaux réalistes avec du matériel dédié est souvent laborieuse. Le matériel est volumineux, cher et surtout extrêmement bruyant. Virtualiser des réseaux complexes à partir d'un simple poste de travail présente de nombreux avantages.
	</para>
	<para>
		Les briques présentés permettent par exemple de tester l'attaque contre DNS décrite par Dan Kaminsky dans différentes configurations et avec une architecture <abbrev>DNS</abbrev> complète (root(s) serveur(s), master(s) de zone, cache(s) et forwarder(s)) sur un simple pc sous Linux.
	</para>
	<para>
		Elles peuvent également être mises à contribution pour reproduire l'attaque contre Youtube par Pakistan Telecom (quelle bande de farceurs !) [<ulink url="http://www.ripe.net/news/study-youtube-hijacking.html" />] ou encore tester l'attaque décrite par Anton Kapela et Alex Pilosov sur le détournement de trafic réseau exploitant les faiblesses de BGP et présentée à la DefCon 2008.
	</para>
<sect2 id="netkit-presentation">
	<title>Présentation de Netkit</title>
	<para>
		Netkit [<ulink url="http://www.netkit.org" />] est un logiciel libre sous licence GPL développé par le groupe "computer network research" de l'université de Rome3 et par le LUG (Linux user Group) "Roma 3"
	</para>
	<para>
		Il est composé de différents scripts permettant le lancement et l'arrêt des machines virtuelles, d'un noyau Linux UML et de l'image d'une distribution issue de Debian disposant d'outils liés au réseau dont voici une liste non exhaustive :
	</para>
	<itemizedlist>
		<listitem><para>support du 802.1q (vlan), 802.1q (spanning tree) ;</para></listitem>
		<listitem><para>démons de routage dynamique (quagga) avec support de MPLS et distribution de labels par LDP ;</para></listitem>
		<listitem><para>support des tunnels IPsec, GRE et MPLS (IP over MPLS et Ethernet over MPLS) ;</para></listitem>
		<listitem><para>support d'ipv6 ;</para></listitem>
		<listitem><para>outils de filtrage (iptables, ebtables) ;</para></listitem>
		<listitem><para>DNS coté serveur (BIND) et client (host dig) ;</para></listitem>
		<listitem><para>SMTP avec Exim ;</para></listitem>
		<listitem><para>FTP avec Proftpd et TFTP avec tftpd ainsi que des clients respectifs ;</para></listitem>
		<listitem><para>Apache, Squid et différents clients web en mode texte ;</para></listitem>
		<listitem><para>Telnet et ssh cotés clients et serveur ;</para></listitem>
		<listitem><para>Samba ;</para></listitem>
		<listitem><para>Outils de sniffing (tcpdump) ;</para></listitem>
		<listitem><para>Outils de détection d'intrusion (snort, arpwatch, ..) ;</para></listitem>
		<listitem><para>Outils offensifs (nmap, hping, arpspoof, ...)</para></listitem>
		<listitem><para>...</para></listitem>
	</itemizedlist>
	<para>
		Le site de netkit met également à disposition un très grand nombre de laboratoires prêts à fonctionner (architecture DNS complète, routage dynamique RIP, BGP, ...) avec un documentation associée décrivant de manière détaillée le fonctionnement.
	</para>
	<para>
		Les machines virtuelles peuvent accéder à l'extérieur via une interface TAP (ce sont des interfaces virtuelles sous Linux liées à un ou des processus). Dès lors, les machines Netkit étant dérivées de Debian, un simpe apt-get install permettra d'installer n'importe quel paquet de la branche unstable, le fichier sources.list n'a même par besoin d'être édité pour ceci.
	</para>
</sect2>
<sect2 id="netkit-lab1">
	<title>Découverte au travers d'un premier Lab</title>
	<sect3 id="netkit-lab1-pc">
		<title>Lancemement de deux pc :</title>
		<para>
			Nous commançons par lancer deux machines virtuelles dans un même LAN que nous appellons <varname>A</varname>
		</para>
		<screen>
$ vstart client --eth0=A
$ vstart pirate --eth0=A
		</screen>
		<para>
			Un terminal X est associé à chacune des machines virtuelles (client et pirate) lors de leur création. Chacune dispose d'une interface réseau (<varname>eth0</varname>) reliée au même hub virtuel du domaine de broadcast "<varname>A</varname>" (c'est à dire sur le même domaine de collision). Tous les paquets émis sur celui-ci seront transmis à toutes les interfaces des machines Netkit connectées à ce hub.
		</para>
		<para>
			Nous disposons maintenant de deux machines virtuelles raccordées toutes les deux au hub virtuel "<varname>A</varname>". Il ne reste plus qu'à configurer nos deux cartes réseau :
		</para>
		<para>
			Sur <varname>client</varname> :
		</para>
		<screen>
	client:~#ifconfig eth0 172.30.0.1
		</screen>
		<para>
			Puis sur <varname>pirate</varname> :
		</para>
		<screen>
	pirate:~#ifconfig eth0 172.30.0.1
	pirate:~#arp -an
	pirate:~#ping -c 1 172.30.0.1

	BASH
		</screen>
		<para>
		<important> Remplacer le hib virtuel par un switch</important>
			Il est également possible de remplacer les hubs virtuels par des switchs virtuels en modifiant les scripts de lancement de Netkit.
		</para>
		<para>
		Pour ceci, il conviendra d'éditer le fichier <filename>bin/script_utils</filename> et de remplacer la ligne suivant :
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap $TAP_DEVICE -hub -unix $1 &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			par :
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap $TAP_DEVICE -unix $1  &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			et la ligne suivante :
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap -hub -unix $1 &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			par
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap  -unix $1 &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			Il est également possible de créer une machine Netkit faisant office de bridge comme nous le verrons par la suite.
		</para>
	</sect3>
	<sect3 id="netkit-lab1-routeur">
		<title>Routeur avec accès à l'extérieur</title>
		<para>
			Pour accéder à l'extérieur, nous créons un routeur disposant d'une interface eth0 sur le hub virtuel "<varname>A</varname>" et d'une interface eth1 (interface TAP du système hôte), afin de faire communiquer l'ensemble des machines virtuelles vers l'extérieur et donc de pouvoir installer de nouveaux paquets.
		</para>
		<para>
			Le réseau ressemble alors à ceci : voir figure 1.
		</para>
		<mediaobject>
  			<imageobject>
    				<imagedata fileref="img/figure1.png" format="PNG"/>
  			</imageobject>
  			<textobject>
    				<phrase>figure 1</phrase>
  			</textobject>
		</mediaobject>
		<para>
			<important>Interface TAP</important>
			La création d'une machine virtuelle disposant d'une interface TAP nécessite que l'utilisateur dispose des roits root sur le sytème hôte.
			La commande peut-être lancée avec les droits sans privilège, l'utilisateur sera invité, au moment de la création de l'interface TAP, à fournir le mot de passe root.
		</para>
		<para>
			Attention, noter l'apparition de l'interface nk_tap_cedric avec l'adresse ip 10.0.0.1 sur le système hôte : 
		</para>
		<para>
			De même, une interface eth1 avec l'IP 10.0.0.2 a été créée sur la machine virtuelle « <varname>routeur</varname> » qui peut maintenant joindre l'extérieur
		</para>
		<para>
			En outre, dans sa grandeur et afin de nous faciliter la vie, Netkit a effectué les opérations suivantes sur le système hôte :
		</para>
		<itemizedlist>
			<listitem><para>ajout d'une règle de translation d'adresse</para></listitem>
			<listitem><para>ajout d'une règle autorisant les flux émis par notre interface TAP ;</para></listitem>
			<listitem><para>activation du routage :</para></listitem>
		</itemizedlist>	
		<screen>
	BASH
		</screen>
		<para>
			Netkit a également ajouté une règle de routage sur le routeur précisant que la passerelle par défaut est l'interface TAP du système hôte.
		</para>
		<para>
			Il ne reste plus qu'à finir de configurer le DNS sur notre routeur (fichier <filename>/etc/resolv.conf</filename>), son adresse interne (disons 172.30.0.250) et de s'assurer que le routage est activé (il l'est par défaut sur toutes les machines Netkit).
		</para>
		<screen>
	BASH
		</screen>
		<para>
			Puis sur <varname>client</varname> et <varname>pirate</varname> :
		</para>
		<screen>
	BASH
		</screen>
		<para>
			Cela suffit-il pour que les machines autres que le routeur puissent joindre l'extérieur?	
		</para>	
		<para>
			Non! Le système hôte sera incapable de router les paquets retour. Il n'a en effet aucune connaissance du plan d'adressage internet des machines Netkit (dans notre cas 172,39,9,9/16). Nous avons deux solutions :
		</para>
		<itemizedlist>
			<listitem><para>Réaliser une seconde translation d'adresse au niveau du routeur pour que les paquets qu'il émet vers l'interface TAP le soient avec l'adresse IP 19.9.9,2.</para></listitem>
			<listitem><para>Ajouter une route sur le système hôte pour router les paquets 172,39,9,9/16 vers l'interface TAP.</para></listitem>
		</itemizedlist>
		<para>
			C'est la première solution que nous choisirons.	
		</para>
		<screen>
	BASH
		</screen>
		<para>
			Vérifions que tout fonctionne comme escompté sur le <varname>client</varname> :		
		</para>
		<screen>
	BASH
		</screen>
		<para>
			Il est maintenant possible d'installer des paquets supplémentaires sur les machines virtuelles ou de mettre à  jour les paquets présents. Pour ceci, if est toutefois nécessaire d'augmenter la mémoire de la machine concernée grâce à l'option -M afin d'utiliser apt-get confortablement.
		</para>
	</sect3>
	<sect3 id="netkit-lab1-mitm">
		<title>Attaque de type Man in The Middle</title>
		<para>
			Nous allons maintenant nous essayer à une attaque de type "Man ln The Middle" par arp cache poisoning. Ce type ttaque a déjà été évoqué dans MISC et la littérature sur le sujet est abondante.
		</para>
		<mediaobject>
  			<imageobject>
    				<imagedata fileref="img/figure2.png" format="PNG"/>
  			</imageobject>
  			<textobject>
    				<phrase>figure 2</phrase>
  			</textobject>
		</mediaobject>
		<para>
			De manière synthétique, le principe de l'attaque est de rompre les tables de correspondances ARP des machines dont nous voulons rediriger les flux pour leur faire croire que la nouvelle adresse MAC de leur correspondant est la nôtre.		
		</para>	
		<para>
			Par ailleurs, afin de faciliter la compréhension, nous avons modifié le script <filename>bin/script_utils</filename> afin que les machines soient connectées sur des switchs virtuels plutôt que des hubs comme indiqué précédemment.
		</para>	
		<para>
			Pour lancer l'attaque, nous utilisons l'outil arpspoof de la suite dsniff comme suit sur la machine pirate alors que la machine <varname>client</varname> ping www.google.com
		</para>	
		<screen>
	BASH
		</screen>	
		<para>
			Il est intéressant de noter que les paquets apparaissent en double. Ils arrivent sur l'interface, puis sont re-routés sur cette même interface vers le destinataire légitime. Une telle décision de routage n'est d'ailleurs pas particulièrement propre et le moteur de routage de linux en avertit l'émetteur par un message ICMP redirect informant que le paquet devrait mieux être directement envoyé vers 172.30.0.250 (ce que croit faire le <varname>client</varname>).
		</para>	
		<para>
			L'émission de ces paquets peut être désactivée sous Linux de la manière suivante :
		</para>
		<screen>
	BASH
		</screen>	
	</sect3>
</sect2>
<sect2 id="passcrackers-thchydra">
<title>THC Hydra</title>
<para>
 Il se lance avec la commande <command>hydra</command> et le fichier de conf est <filename>config/chroot</filename> or by the <command>--apt</command> argument to <filename>lh_config</filename>:
</para>

<variablelist>

<varlistentry><term><command>brute</command></term>
<listitem>
<para>
mode brute force
</para>
</listitem>
</varlistentry>

<varlistentry><term><command>gentil</command></term>
<listitem>
<para>
le mode gentil
</para>
<para>
il est vraiment gentil
</para>
</listitem>
</varlistentry>
</variablelist>

</sect2>
<sect2 id="lh-packages">
<title>The <command>LH_PACKAGES</command> variable</title>
<screen>
$ lh_config --packages "package1 package2 package3"
</screen>

<para>le comportement de   est blabla. voir <xref linkend="passcrackers-johntheripper"/> for more details.</para>

<para>
 If you need to specify a large number of packages to be installed or you need flexibility regarding which packages to install, you should probably be using package lists. See <xref linkend="package-lists"/> for more information.
</para>
</sect2>
</sect1>
