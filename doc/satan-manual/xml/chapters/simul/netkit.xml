<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
    "http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
  <!ENTITY % commondata SYSTEM "../../entities/common.ent" > %commondata;
]>
<sect2 id="netkit">
	<title>Emulation d'architecture réseau avec Netkit</title>
	<para>Copyright : 2008, Cedric Foll, MISC n°40 Novembre/Décembre 2008, Diamond Editions</para>
	<para>
	 La virtualisation de serveurs et de postes de travail est aujourd'hui une pratique extrêmement répandue. Elle est devenue indispensable à tous les administrateurs système pour effectuer des tests de pré-production ou optimiser les ressources matérielles des data-centers. Nous exposons dans cette documentation ce que les mécanismes  de virtualisation peuvent apport aux administrateurs et architectes réseau dans une optique de prototypage. ces outils servent également dans le cadre d'enseignements ou comme outil d'étude pour le pen-tester souhaitant répliquer l'architecture d'une partie du réseau audité pour effectuer des tests avant de lancer l'attaque en réel.
	</para>
	<para>La reproduction en laboratoire de réseaux réalistes avec du matériel dédié est souvent laborieuse. Le matériel est volumineux, cher et surtout extrêmement bruyant. Virtualiser des réseaux complexes à partir d'un simple poste de travail présente de nombreux avantages.
	</para>
	<para>
		Les briques présentés permettent par exemple de tester l'attaque contre DNS décrite par Dan Kaminsky dans différentes configurations et avec une architecture <abbrev>DNS</abbrev> complète (root(s) serveur(s), master(s) de zone, cache(s) et forwarder(s)) sur un simple pc sous Linux.
	</para>
	<para>
		Elles peuvent également être mises à contribution pour reproduire l'attaque contre Youtube par Pakistan Telecom (quelle bande de farceurs !) <footnote><ulink url="http://www.ripe.net/news/study-youtube-hijacking.html" /></footnote> ou encore tester l'attaque décrite par Anton Kapela et Alex Pilosov sur le détournement de trafic réseau exploitant les faiblesses de BGP et présentée à la DefCon 2008.
	</para>
<sect3 id="netkit-presentation">
	<title>Présentation de Netkit</title>
	<para>
		Netkit <footnote><ulink url="http://www.netkit.org" /></footnote> est un logiciel libre sous licence GPL développé par le groupe "computer network research" de l'université de Rome3 et par le LUG (Linux user Group) "Roma 3"
	</para>
	<para>
		Il est composé de différents scripts permettant le lancement et l'arrêt des machines virtuelles, d'un noyau Linux UML et de l'image d'une distribution issue de Debian disposant d'outils liés au réseau dont voici une liste non exhaustive :
	</para>
	<itemizedlist>
		<listitem><para>Support du 802.1q (vlan), 802.1q (spanning tree) ;</para></listitem>
		<listitem><para>Démons de routage dynamique (quagga) avec support de MPLS et distribution de labels par LDP ;</para></listitem>
		<listitem><para>Support des tunnels IPsec, GRE et MPLS (IP over MPLS et Ethernet over MPLS) ;</para></listitem>
		<listitem><para>Support d'ipv6 ;</para></listitem>
		<listitem><para>Outils de filtrage (iptables, ebtables) ;</para></listitem>
		<listitem><para>DNS coté serveur (BIND) et client (host dig) ;</para></listitem>
		<listitem><para>SMTP avec Exim ;</para></listitem>
		<listitem><para>FTP avec Proftpd et TFTP avec tftpd ainsi que des clients respectifs ;</para></listitem>
		<listitem><para>Apache, Squid et différents clients web en mode texte ;</para></listitem>
		<listitem><para>Telnet et ssh cotés clients et serveur ;</para></listitem>
		<listitem><para>Samba ;</para></listitem>
		<listitem><para>Outils de sniffing (tcpdump) ;</para></listitem>
		<listitem><para>Outils de détection d'intrusion (snort, arpwatch, ..) ;</para></listitem>
		<listitem><para>Outils offensifs (nmap, hping, arpspoof, ...)</para></listitem>
		<listitem><para>...</para></listitem>
	</itemizedlist>
	<para>
		Le site de netkit met également à disposition un très grand nombre de laboratoires prêts à fonctionner (architecture DNS complète, routage dynamique RIP, BGP, ...) avec un documentation associée décrivant de manière détaillée le fonctionnement.
	</para>
	<para>
		Les machines virtuelles peuvent accéder à l'extérieur via une interface TAP (ce sont des interfaces virtuelles sous Linux liées à un ou des processus). Dès lors, les machines Netkit étant dérivées de Debian, un simpe apt-get install permettra d'installer n'importe quel paquet de la branche unstable, le fichier sources.list n'a même par besoin d'être édité pour ceci.
	</para>
</sect3>
<sect3 id="netkit-lab1">
	<title>Découverte au travers d'un premier Lab</title>
	<sect4 id="netkit-lab1-pc">
		<title>Lancemement de deux pc :</title>
		<para>
			Nous commançons par lancer deux machines virtuelles dans un même LAN que nous appellons <varname>A</varname>
		</para>
		<screen>
$ vstart client --eth0=A
$ vstart pirate --eth0=A
		</screen>
		<para>
			Un terminal X est associé à chacune des machines virtuelles (client et pirate) lors de leur création. Chacune dispose d'une interface réseau (<varname>eth0</varname>) reliée au même hub virtuel du domaine de broadcast "<varname>A</varname>" (c'est à dire sur le même domaine de collision). Tous les paquets émis sur celui-ci seront transmis à toutes les interfaces des machines Netkit connectées à ce hub.
		</para>
		<para>
			Nous disposons maintenant de deux machines virtuelles raccordées toutes les deux au hub virtuel "<varname>A</varname>". Il ne reste plus qu'à configurer nos deux cartes réseau :
		</para>
		<para>
			Sur <varname>client</varname> :
		</para>
		<screen>
	client:~#ifconfig eth0 172.30.0.1
		</screen>
		<para>
			Puis sur <varname>pirate</varname> :
		</para>
		<screen>
	pirate:~#ifconfig eth0 172.30.0.1
	pirate:~#arp -an
	pirate:~#ping -c 1 172.30.0.1

	BASH
		</screen>
		<para>
		<important> Remplacer le hib virtuel par un switch</important>
			Il est également possible de remplacer les hubs virtuels par des switchs virtuels en modifiant les scripts de lancement de Netkit.
		</para>
		<para>
		Pour ceci, il conviendra d'éditer le fichier <filename>bin/script_utils</filename> et de remplacer la ligne suivante :
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap $TAP_DEVICE -hub -unix $1 &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			par :
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap $TAP_DEVICE -unix $1  &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			et la ligne suivante :
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap -hub -unix $1 &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			par
		</para>
		<screen>
HUB_COMMAND="$NETKIT_HOME/bin/uml_switch -tap  -unix $1 &lt;/dev/null 2&gt;&amp;1"
		</screen>
		<para>
			Il est également possible de créer une machine Netkit faisant office de bridge comme nous le verrons par la suite.
		</para>
	</sect4>
	<sect4 id="netkit-lab1-routeur">
		<title>Routeur avec accès à l'extérieur</title>
		<para>
			Pour accéder à l'extérieur, nous créons un routeur disposant d'une interface eth0 sur le hub virtuel "<varname>A</varname>" et d'une interface eth1 (interface TAP du système hôte), afin de faire communiquer l'ensemble des machines virtuelles vers l'extérieur et donc de pouvoir installer de nouveaux paquets.
		</para>
		<para>
			Le réseau ressemble alors à ceci : voir figure 1.
		</para>
		<mediaobject>
  			<imageobject>
    				<imagedata fileref="img/figure1.png" format="PNG"/>
  			</imageobject>
  			<textobject>
    				<phrase>figure 1</phrase>
  			</textobject>
		</mediaobject>
		<para>
			<important>Interface TAP</important>
			La création d'une machine virtuelle disposant d'une interface TAP nécessite que l'utilisateur dispose des roits root sur le sytème hôte.
			La commande peut-être lancée avec les droits sans privilège, l'utilisateur sera invité, au moment de la création de l'interface TAP, à fournir le mot de passe root.
		</para>
		<para>
			Nous pouvons noter l'apparition de l'interface nk_tap_vincent avec l'adresse ip 10.0.0.1 sur le système hôte : 
		</para>
		<screen>
$ vstart routeur --eth1=tap,10.0.0.1,10.0.0.2 --eth0=A
$ ifconfig
(...)
nk_tap_vincent link encap:Ethernet  HWaddr 00:ff:c4:e2:54:9a
	inet adr:10.0.0.1  Bcast:10.255.255.255  Masque:255.0.0.0
	adr inet6: fe80:2ff:c4ff:fee2:549a/64 Scope:lien
	UP BROADCAST RUNNING MULTICAST  MTU:1500  Metric:1
	Packets reçus:0 erreur:0 :0 overruns:0 frame:0
	TX packets:26 errors:0 dropped:4 overruns:0 carrier:0
	collisions:0 lg file transmission:500
	Octets reçus:0 (0.0 B) Octets transmis:3817 (3,7 KB)
		</screen>
		<para>
			De même, une interface eth1 avec l'IP 10.0.0.2 a été créée sur la machine virtuelle « <varname>routeur</varname> » qui peut maintenant joindre l'extérieur
		</para>
		<para>
			En outre, dans sa grandeur et afin de nous faciliter la vie, Netkit a effectué les opérations suivantes sur le système hôte :
		</para>
		<itemizedlist>
			<listitem><para>ajout d'une règle de translation d'adresse</para></listitem>
			<listitem><para>ajout d'une règle autorisant les flux émis par notre interface TAP ;</para></listitem>
			<listitem><para>activation du routage :</para>
			<screen>
$ sudo iptables-save
# Generated by iptables-save v1.3.8 on Sun Mar 1 12:01:03 2009
*nat
:PREROUTING ACCEPT [1:105]
:POSTROUTING ACCEPT [1:149]
:OUTPUT ACCEPT [13:2343]
-A POSTROUTING -j MASQUERADE
COMMIT
# Completed on Sun Mar 1 12:01:03 2009
#Generated by iptables-save v1.3.8 on Sun Mar 1 12:01:03 2009
*filter
:INPUT ACCEPT [41715:40819632]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [35749:4377205]
-A FORWARD -i nk_tap_+ -j ACCEPT
COMMIT
# Completed on Sun Mar 1 12:01:03 2009

$ cat /proc/sys/net/ipv4/ip_forward
1
			</screen>  
			</listitem>
		</itemizedlist>	
		<para>
			Netkit a également ajouté une règle de routage sur le routeur précisant que la passerelle par défaut est l'interface TAP du système hôte.
		</para>
		<para>
			Il ne reste plus qu'à finir de configurer le DNS sur notre routeur (fichier <filename>/etc/resolv.conf</filename>), son adresse interne (disons 172.30.0.250) et de s'assurer que le routage est activé (il l'est par défaut sur toutes les machines Netkit).
		</para>
		<screen>
routeur:~# cat > /etc/resolv.conf
nameserver 192.168.2.1
routeur:~# ifconfig eth0 172.30.0.250
routeur:~# ping -c 1 www.google.fr
PING www.l.google.com (209.85.129.99) 56(84) bytes of data.
64 bytes from fk-in-f99.google.com (209.82.129.99): icmp_seq=1 ttl=241
time=64.1ms

--- www.l.google.com ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 64.163/64.163/64.163/0.000 ms
		</screen>
		<para>
			Puis sur <varname>client</varname> et <varname>pirate</varname> :
		</para>
		<screen>
client:~# cat > /etc/resolf.conf
nameserver 192.168.2.1
client:~# route add default gw 172.30.0.250
		</screen>
		<para>
			Cela suffit-il pour que les machines autres que le routeur puissent joindre l'extérieur?	
		</para>	
		<para>
			Non! Le système hôte sera incapable de router les paquets retour. Il n'a en effet aucune connaissance du plan d'adressage internet des machines Netkit (dans notre cas 172,39,9,9/16). Nous avons deux solutions :
		</para>
		<itemizedlist>
			<listitem><para>Réaliser une seconde translation d'adresse au niveau du routeur pour que les paquets qu'il émet vers l'interface TAP le soient avec l'adresse IP 19.9.9,2.</para></listitem>
			<listitem><para>Ajouter une route sur le système hôte pour router les paquets 172,39,9,9/16 vers l'interface TAP.</para></listitem>
		</itemizedlist>
		<para>
			C'est la première solution que nous choisirons.	
		</para>
		<screen>
routeur:~# iptables -t nat -A POSTROUTING -o eth1 -j MASQUERADE
		</screen>
		<para>
			Vérifions que tout fonctionne comme escompté sur le <varname>client</varname> :		
		</para>
		<screen>
client:~# ping -c 1 www.google.com
PING www.l.google.com (209.85.129.104) 56(84) bytes of data.
64 bytes from fk-in-f104.google.com (209.85.129.104): icmp_seq=1 ttl=240 time=64.0 ms

--- www.l.google.com ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 64.071/64.071/64.071/0.000 ms
		</screen>
		<para>
			Il est maintenant possible d'installer des paquets supplémentaires sur les machines virtuelles ou de mettre à  jour les paquets présents. Pour ceci, if est toutefois nécessaire d'augmenter la mémoire de la machine concernée grâce à l'option -M afin d'utiliser apt-get confortablement.
		</para>
	</sect4>
	<sect4 id="netkit-lab1-mitm">
		<title>Attaque de type Man in The Middle</title>
		<para>
			Nous allons maintenant nous essayer à une attaque de type "Man ln The Middle" par arp cache poisoning. Ce type ttaque a déjà été évoqué dans MISC et la littérature sur le sujet est abondante.
		</para>
		<mediaobject>
  			<imageobject>
    				<imagedata fileref="img/figure2.png" format="PNG"/>
  			</imageobject>
  			<textobject>
    				<phrase>figure 2</phrase>
  			</textobject>
		</mediaobject>
		<para>
			De manière synthétique, le principe de l'attaque est de rompre les tables de correspondances ARP des machines dont nous voulons rediriger les flux pour leur faire croire que la nouvelle adresse MAC de leur correspondant est la nôtre.		
		</para>	
		<para>
			Par ailleurs, afin de faciliter la compréhension, nous avons modifié le script <filename>bin/script_utils</filename> afin que les machines soient connectées sur des switchs virtuels plutôt que des hubs comme indiqué précédemment.
		</para>	
		<para>
			Pour lancer l'attaque, nous utilisons l'outil arpspoof de la suite dsniff comme suit sur la machine pirate alors que la machine <varname>client</varname> ping www.google.com
		</para>	
		<screen>
pirate:~# route add default gw 172.30.0.250
pirate:~# arpspoof -t 172.30.0.1 172.30.0.250 2> /dev/null 
[1] 438
pirate:~# arpspoof -t 172.30.0.250 172.30.0.1 2> /dev/null 
[2] 439
pirate:~# tcpdump -n ip 
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode 
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
20:50:28.207517 IP 172.30.0.1.32768 > 192.168.2.1.53: 37172+ A? www.google.com. (32)
20:50:28.210729 IP 172.30.0.66 > 172.30.0.1: ICMP redirect 192.168.2.1 to host
172.30.0.250, length 68
20:50:28.211176 IP 172.30.0.1.32768 > 192.168.2.1.53: 37172+ A? www.google.com. (32)
20:50:28.208438 IP 192.168.2.1.53 > 172.30.0.1.32768: 37172 4/0/0 CNAME www.l.google.
com.,[|domain]
20:50:28.208461 IP 192.168.2.1.53 > 172.30.0.1.32768: 37172 4/0/0 CNAME www.l.google.
com.,[|domain]
20:50:28.215245 IP 172.30.0.1 > 209.85.129.99: ICMP echo request, id 46849, seq 1, length 64
20:50:28.215353 IP 172.30.0.1 > 209.85.129.99: ICMP echo request, id 46849, seq 1, length 64
20:50:28.279674 IP 209.85.129.99 > 172.30.0.1: ICMP echo reply, id 46849, seq 1, length 64
20:50:28.279717 IP 209.85.129.99 > 172.30.0.1: ICMP echo reply, id 46849, seq 1, length 64
20:50:28.281864 IP 172.30.0.1.32768 > 192.168.2.1.53: 21907+ PTR? 99.129.85.209.in-
addr.arpa (44)
20:50:28.281929 IP 172.30.0.66 > 172.30.0.1: ICMP redirect 192.168.2.1 to host
172.30.0.250, length 80
20:50:28.281953 IP 172.30.0.1.32768 > 192.168.2.1.53: 21907+ PTR? 99.129.85.209.in-
addr.arpa (44)
20:50:28.283556 IP 192.168.2.1.53 > 172.30.0.1.32768: 21907 1/0/0 (78)
20:50:28.283596 IP 192.168.2.1.53 > 172.30.0.1.32768: 21907 1/0/0 (78) 
		</screen>	
		<para>
			Il est intéressant de noter que les paquets apparaissent en double. Ils arrivent sur l'interface, puis sont re-routés sur cette même interface vers le destinataire légitime. Une telle décision de routage n'est d'ailleurs pas particulièrement propre et le moteur de routage de linux en avertit l'émetteur par un message ICMP redirect informant que le paquet devrait mieux être directement envoyé vers 172.30.0.250 (ce que croit faire le <varname>client</varname>).
		</para>	
		<para>
			L'émission de ces paquets peut être désactivée sous Linux de la manière suivante :
		</para>
		<screen>
# echo 0 > /proc/sys/net/ipv4/conf/all/send_redirects
		</screen>	
	</sect4>
</sect3>
<sect3 id="netkit-lab2">
        <title>Un routeur au bout d'un bâton</title>
	<para>
		L'objet de ce lab est d'introduire le concept de VLAN, ainsi que cette merveille d'architecture réseau nommée "router on a stick" : voir figure 2 .
	</para>
        <mediaobject> 
		<imageobject>
          		<imagedata fileref="img/figure2.png" format="PNG"/>
		</imageobject>
		<textobject>
			<phrase>figure 2</phrase>
		</textobject>
	</mediaobject>
	<para>
		Ce type d'architecture permet de comprendre les mécanismes de routage inter-VLAN. Nous avons un routeur disposant d'une seule  interface physique et qui réalise du routage entre les zones 10.0.0.0/24 et 192.168.0.0/24. Dans cet exemple, il est connecté à deux zones, mais il pourrait très bien par la même interface router des paquets vers beaucoup plus de VLAN. Ceci permet d'économiser des ports, souvent coûteux, sur les équipements de type routeurs et firewalls.
	</para>
	<para>
		La représentation logique en couche 3 de cette architecture est celle-ci : voir figure 3 .
	</para>
        <mediaobject>
                <imageobject>
                        <imagedata fileref="img/figure3.png" format="PNG"/>
                </imageobject>
                <textobject>
                        <phrase>figure 3</phrase>
                </textobject>
        </mediaobject>
	<sect4 id="netkit-lab2-vlan1">
                <title>Rappel sur les VLAN</title>
		<para>
			Les VLAN sont une technologie permettant de faire coexister, de manière étanche, différents LAN (c'est-à-dire domaines de broadcast).
		</para>
		<para>
			Sur chacun des ports d'un switch supportant les VLAN, l'administrateur spécifie à quel VLAN appartient le port. Deux ports appartenant au même VLAN peuvent communiquer tandis que les échanges entre deux ports appartenant à des VLAN différents sont impossibles (comme s'ils étaient sur deux switchs différents).
		</para>
		<para>
			Le second concept à la base des VLAN est l'encapsulation 802.1Q. Ce mécanisme permet le multiplexage de VLAN sur un lien. Il est en effet possible de spécifier qu'un port appartient à plusieurs VLAN. Dans ce cas, le switch ajoutera un tag 802.1Q de 4 octets sur la couche Ethernet des paquets émis par cette interface. Les deux premiers octets déterminent le numéro de VLAN auquel appartient le paquet. Dans la terminologe Cisco, ces ports sont qualifiés de "trunk".
		</para>
		<para>
			Par ce moyen, il est possible :
		</para>
	        <para>
		<itemizedlist>
        	        <listitem><para>De propager nos VLAN en chaînant des switchs via des liens 802.1Q.</para></listitem>
                	<listitem><para>De limiter le nombre d'interfaces des équipements réalisant du routage (routeur et firewalls). Il est en effet possible de router un paquet d'un VLAN vers un autre en ne disposant que d'une seule interface graphique. On parle alors de routage inter-VLAN. Par exemple, le paquet entre avec un tag 802.1q spécifiant qu'il appartient au <varname>vlan 100</varname>, l'équipement prend une décision de routage et réémet le paquet sur la même interface avec un tag 802.1q spécifiant qu'il appartient maintenant au <varname>vlan 200</varname>.</para></listitem>
        	</itemizedlist>
		</para>
		<para>
			Les VLAN sont aujourd'hui supportés par la quasi-totalité des switchs, routeurs et firewalls utilisés dans un contexte professionnel, ainsi que sur les principaux OS (en particulier Windows ou Linux). Cette technologie est utilisée dans la plupart des réseaux d'envergure (grandes entreprises, administrations, fournisseurs d'accès,...).
		</para>
		<para>
			Dans notre exemple, nous allons "émuler" un switch supportant les VLAN par une machine sous Linux utilisant des fonctionnalités de type bridge.
		</para>
	</sect4>
        <sect4 id="netkit-lab2-vlan2">
                <title>Création de l'architecture</title>
		<para>
			Nous avons dans ce laboratoire un routeur virtuel (R) disposant d'une seule interface, d'un switch (S) disposant de 3 interfaces et de deux PC. Lancer tout ceci en ligne de commande sans se tromper peut paraître un peu complète, mais Netkit offre un système de fichiers de configuration permettant d'automatiser le lancement de laboratoires préconfigurés.
		</para>
		<para>
			Afin de construire cette architecture, nous nous appuyons sur une interface graphique Netkit, VisualNetkit<footnote><ulink url="http://code.google.com/p/visual-netkit/" /></footnote>, aidant à la génération de ces fichiers de configuration.
		</para>
		<para>
			Le paquet se compile sans difficulté sur une Ubuntu Hardy et le réseau ci-dessus se configure en quelques minutes à la souris.
		</para>
		<para>
			Voici ce qui apparaît dans le répertoire où nous avons sauvegardé notre laboratoire :
		</para>
                <screen>
$ ls
lab.conf  PC1	       PC2	    R	       S
lab.xml   PC1.startup  PC2.startup  R.startup  S.stratup
                </screen>
		<para>
			Le fichier <varname>lab.conf</varname> contient la liste des machines virtuelles avec les interfaces associées :
		</para>
		<screen>
###
# This file is created by Visual Netkit 1.0b version
# http://www.netkit.org ~ http://code.google.com/p/visual-netkit/
#
LAB_DESCRIPTION="Routage inter-vlan par Vincent-Yohann"
LAB_VERSION="1.0"
LAB_AUTHOR="Vincent-Yohann"
LAB_EMAIL="test@gmail.com"
LAB_WEB="http://test.name/"

PC1[0]="A"
PC2[0]="B"
R[0]="Interco"
S[0]="Interco"
S[1]="A"
S[2]="B"
		</screen>
		<para>
			Les fichiers <filename>*.startup</filename> contiennent la liste des commandes éxécutées après lancement de la machine virtuelle. VisualNetkit se contentera de les créer en préconfgurant éventuellement les adresses IP. Il conviendra ensuite d'éditer ces fichiers afin d'automatiser l'éxécution des commandes nécessaires à notre architecture.
		</para>
		<para>
			Par exemple, <filename>R.startup</filename> contient es lignes suivantes :
		</para>
		<screen>
1: ###
2: # This file is created by Visual Netkit 1.b version
3: # http://www.netkit.org ~ http://code.google.com/p/visual-netkit/
4: #
5: /sbin/ifconfig eth0 up ## 'Interco' collision domain ##
6: /sbin/vconfig add eth0 100
7: /sbin/ifconfig eth0.100 10.0.0.250
8: /sbin/vconfig add eth0 200
9: /sbin/ifconfig eth0.200 192.168.0.250
		</screen>
		<para>
			Quelques explications :
		</para>
		<para>
			Sous Linux, la création de sous-interfaces liées à des VLAN se fait via la commande vconfig. Le premier appel à vconfig ci-dessus a la signification suivante :
		</para>
		<para>
                <itemizedlist>
                        <listitem><para>Ligne 5 : création de l'interface <varname>eth0</varname>, qui n'a pas besoin d'adresse.</para></listitem>
                        <listitem><para>Ligne 6 : création d'une sous-interface à <varname>eth0</varname>. Cette sous-interface sera nommée <varname>eth0.100</varname>.</para></listitem>
			<listitem><para>Les paquets Ethernet avec un tag 802.1q arrivant sur l'interface <varname>eth0</varname> spécifiant qu'ils appartiennent au <varname>vlan100</varname> sont transmis à la sous-interface <varname>eth0.100</varname>.</para></listitem>
			<listitem><para>Les paquets émis via la sous-interface <varname>eth0.100</varname> sont envoyés par l'interface <varname>eth0</varname> avec un tag 802.1q spécifiant qu'ils appartiennent au <varname>vlan 100</varname>.</para></listitem>
			<listitem><para>Ligne 7 : attribution d'une addresse à cette sous-interface.</para></listitem>
			<listitem><para>Ligne 8 et 9 : même opération pour la seconde sous-interface qui se trouve dans le <varname>vlan 200</varname>.</para></listitem>
                </itemizedlist>
		</para>
		<para>
			Ensuite, le fichier <filename>S.startup</filename> contient ceci :
		</para>
		<screen>
###
# This file is created by Visual Netkit 1.0b version
# http://www.netkit.org ~ http://code.google.com/p/visual-netkit/
#
/sbin/ifconfig eth0 up ## 'Interco' collision domain ##
/sbin/ifconfig eth1 up ## 'A' collision domain ##
/sbin/ifconfig eth2 up ## 'B' collision domain ##

/sbin/vconfig add eth0 100
/sbin/ifconfig eth0.100 up
/sbin/vconfig add eth0 200
/sbin/ifconfig eth0.200 up

/usr/sbin/brctl addbr vlan100
/usr/sbin/brctl addif vlan100 eth1
/usr/sbin/brctl addif vlan100 eth0.100
/sbin/ifconfig vlan100 up 

/usr/sbin/brctl addbr vlan200
/usr/sbin/brctl addif vlan200 eth2
/usr/sbin/brctl addif vlan200 eth0.200
/sbin/ifconfig vlan200 up 
		</screen>
		<para>
			Sur cette machine, nous créons deux sous-interfaces à l'interface <varname>eth0</varname> (<varname>eth0.100</varname> et <varname>eth0.200</varname>). Ensuite nous "bridgeons" (commande <varname>brctl</varname>) les interfaces <varname>eth0.100</varname> avec <varname>eth1</varname> et <varname>eth0.200</varname> avec <varname>eth2</varname>.
		</para>
		<para>
			Aussi, nous nous retrouvons avec un switch dont l'interface <varname>eth1</varname> se trouve dans le <varname>vlan 100</varname>, l'interface <varname>eth2</varname> dans le <varname>vlan 200</varname> et l'interface <varname>eth0</varname> est en mode 802.1q propageant les <varname>vlan 100</varname> et <varname>vlan 200</varname>.
		</para>
		<para>
			En bridgeant nos interfaces et sous-interfaces, nous avons décrit la définition d'un switch configuré avec des VLAN (seules les interfaces dans les mêmes VLAN peuvent communiquer, c'est-à-dire que les interfaces dans les mêmes VLAN sont bridgées).
		</para>
		<para>
			Enfin, les répertoires ayant pour nom ceux des machines virtuelles (<varname>PC1</varname>, <varname>PC2</varname>, <varname>R</varname> et <varname>S</varname> dans notre exemple) peuvent contenir des fichiers qui seront copiés dans l'arborescence des machines virtuelles correspondantes afin, par exemple, d'automatiser la configuration des démons.
		</para>
		<para>
			Il ne reste plus qu'à tester notre laboratoire et vérifier que tout fonctionne comme ecompté :
		</para>
		<para>
			Sur <varname>PC1</varname> :
		</para>
		<screen>
PC1:~# ping -c 1 192.168.0.1
PING 192.168.0.1 (192.168.0.1) 56(64) bytes of data.
64 bytes from 192.168.0.1: icmp_seq=1 ttl=63 time=1.04 ms

--- 192.168.0.1 ping statistics ---
1 packets transmitted, 1 received, 0% packet loss, time 0ms
rtt min/avg/max/mdev = 1.049/1.049/1.049/0.000 ms
		</screen>
		<para>
			Sur <varname>R</varname> :
		</para>
		<screen>
R:~# tcpdump -n -i eth0
tcpdump: WARNING: eth0: no IPv4 address assigned
tcpdump: verbose output supressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
23:09:30.328238 vlan 100, p 0, IP 10.0.0.1 > 192.168.0.1: ICMP echo request, id 42497,
seq 1, length 64
23:09:30.340558 vlan 200, p 0, IP 10.0.0.1 > 192.168.0.1: ICMP echo request, id 42497,
seq 1, length 64
23:09:30.328674 vlan 200, p 0, IP 192.168.0.1 > 10.0.0.1: ICMP echo reply, id 42497,
seq 1, length 64
23:09:30.328707 vlan 100, p 0, IP 192.168.0.1 > 10.0.0.1: ICMP echo reply, id 42497,
seq 1, length 64
		</screen>
		<para>
			Nous notons, avec émerveillement, le paquet <varname>icmp request</varname> entré avec un tag spécifiant qu'il appartient au <varname>vlan 100</varname>, puis ressorti avec un tag spécifiant qu'il appartient au <varname>vlan 200</varname>. Notre routeur a fait son travail.
		</para>
		<para>
			Il est également possible de réaliser le <varname>tcpdump</varname> à partir d'une sous-interface et, dans ce cas, il n'y a plus de tag 802.1q:
		</para>
		<screen>
R:~# tcpdump -n -i eth0.100
tcpdump: verbose output supressed, use -v or -vv for full protocol decode
listening on eth0.100, link-type EN10MB (Ethernet), capture size 96 bytes
23:09:46.647203 IP 10.0.0.1 > 192.168.0.1: ICMP echo request, id 42753, seq 1, length 64
23:09:46.647580 IP 192.168.0.1 > 10.0.0.1: ICMP echo reply, id 42753, seq 1, length 64
		</screen>
	</sect4>
        <sect4 id="netkit-lab2-vlan3">
                <title>Petite disgression sur l'incommunicabilité dans les réseaux IP</title>
                <para>
			Que se passe-t-il si un paquet de 1500 octets arrive sur une interface non-taguée (par exemple <varname>eth2</varname>) avant d'être transmis vers une sous-interface (par exemple <varname>eth0.200</varname>) et se voir ajouter ainsi 4 octets ?
		</para>
		<para>
			Nous nous retrouvons alors devant un problème aussi classique que souvant complexe des mécanismes liés à l'encapsulation et autre "tunneling". En effet, comme le 802.1q ajoute 4 octets sur la couche Ethernet, les paquets déjà au maximum du MTU avant l'ajout de ce tag vont poser problème et être détruits.
		</para>
		<para>
			Dans des cas aussi simples que celui-ci, les équipements récents, à la différence d'un Linux transformé en switch, savent s'en sortir, mais dans des cas plus compliqués (lorsque "l'overhead" est plus important) comme avec du tunneling (IPSec, GRE, PPPoE,...), il est nécessaire de trouver une solution satisfaisante.
		</para>
		<para>
			Comment ce type de problème peut-il être résolu de manière transparente pour les administrateurs système (c'est-à-dire sans repasser sur tous les serveurs pour baisser de quatre octets leur MTU) ?
		</para>
		<para>
		<itemizedlist>
                        <listitem><para>La fragmentation. Pour ceci, un équipement de couche 3 (un routeur) doit détecter que le paquet est trop gros et envoyer un paquet ICMP "need to fragment" pour provoquer une fragmentation du paquet incriminé. Dans notre cas, le problème se produit avant qu'un équipement de couche 3 soit atteint. De plus, ce mécanisme est jugé obsolète et beaucoup d'OS ajoutent le tag DF ("Don't fragment") sur tous leurs paquets pour interdire la fragmentation.</para></listitem>
                        <listitem><para>Path MTU discovery (RFC1191). Le mécanisme est similaire au précédent sauf qu'au lieu de fragmenter les paquets à la réception du message d'erreur ICMP, le client va envoyer des paquets avec un MTU plus faible. Cependant, le problème est le même que la fragmentation. La difficulté provient d'un équipement de couche 2 en amont de tout équipement de couche 3. Il n'y a donc pas d'ICMP possible.</para></listitem>
                        <listitem><para>La RFC 4821. Cell-ci prévoit de diminuer le MTU lorsque les paquets sont perdus. Malheureusement, elle n'est pas encore largement implémentée (la RFC date de mars 2007).</para></listitem>
                        <listitem><para>Le champ MSS (Maximum Segment Size) de la couche TCP. Il informe le destinataire des paquets de la taille maximum des données TCP que nous sommes à même d'accepter (ce qui a une incidence directe sur la taille des paquets IP). Pour notre plus grand bohneur, iptables est capable d'altérer dynamiquement les paquets qu'il transmet pour adapter le MSS à son MTU. Ceci se fait par la commande suivante :</para>
		<screen>
# iptables -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS  --clamp-mss-to-pmtu
		</screen>
		</listitem>
		</itemizedlist>
		</para>
		<para>
			Cette manipulation ne fonctionnant que pour les flux TCP, l'administrateur réseau superstitieux brûlera un cierge afin qu'il n'y ait pas trop de paquets UDP de plus de 1496 octets qui transitent...
		</para>
	</sect4>
</sect3>
<sect3 id="netkit-conclusion">
<title>Conclusion</title>
<para>
	Au travers de cette documentation, nous avons vu comment avec un simple PC simuler des architectures réseau réalistes. L'éventail de possibilités inexploitées dans cette doc (routage dynamique, MPLS, large éventail de services réseau, firewalling, IDS,...) est lui aussi impressionnant au regard des pré-requis matériels et logiciels nécessaires pour les mener à bien.
</para>
</sect3>
</sect2>
